# -*- coding: utf-8 -*-
"""[DM]_KNN_supervised.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/122uhw33ie9R0vqKTOwuWkV4bGAWw4CNg
"""

import numpy as np #linear algebra
import pandas as pd #data preprocessing

#visualisasi
import matplotlib.pyplot as plt
import seaborn as sns

#style
plt.style.use('fivethirtyeight')
sns.set_style('darkgrid')

import warnings
warnings.filterwarnings('ignore')

"""import data"""

df = pd.read_csv('/content/Iris.csv')
df

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
df['Species'] = le.fit_transform(df['Species'])

#independent variable
x = df.drop(['Species'], axis=1)

#dependen variable
y = df['Species']

#split data into train and tesr data
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x,y,random_state=0, test_size=0.2)

print(x_train.shape, x_test.shape, y_train.shape, y_test.shape)

from sklearn.utils.multiclass import check_classification_targets
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

list_1 = []
for i in range(1,21) :
  knn = KNeighborsClassifier(n_neighbors=i)
  knn.fit(x_train, y_train)
  preds = knn.predict(x_test)
  scores = accuracy_score(y_test, preds)
  list_1.append(scores)

pip install mlxtend

from mlxtend.plotting import plot_decision_regions
from sklearn.decomposition import PCA

#bikin model untuk belajar
knn = KNeighborsClassifier(n_neighbors=3)
pca = PCA(n_components=2)
x_train2 = pca.fit_transform(x_train)

knn.fit(x_train2, y_train)

plt.figure(figsize=(12,5))
plot_decision_regions(x_train2, y_train.values, clf=knn, legend=2)

plt.xlabel(df.columns[0], size=14)
plt.ylabel(df.columns[1], size=14) #size untuk font huruf
plt.title('K Neighbors Decision Boundary', size=16)

plt.show()

"""paling baik kelas ke 0

Membuat Confusion Matrics
"""

cm = confusion_matrix(y_test, preds)

cm_df = pd.DataFrame(cm,
                     index = ['Sentosa', 'VersiColor', 'Virginica'],
                     columns = ['Sentosa', 'VersiColor', 'Virginica'])

plt.figure(figsize=(8,6))
sns.heatmap(cm_df, annot=True)

plt.title('KNN \nAccuracy:{0:.3f}'.format(accuracy_score(y_test, preds)))
plt.xlabel('Predicted Label')
plt.ylabel('True Label')

plt.show()

accuracy_score(y_test, preds)

confusion_matrix(y_test, preds)

print(classification_report(y_test, preds))

